package commands

import (
	"context"
)

func Run(ctx context.Context, version string, commit string, date string) error {
	app := initializeApplication(version, commit, date)
	err := app.Command.ExecuteContext(ctx)

	// fmt.Println(app.Banner.String())

	/*
		app := cmd.ImmichServerFlags{
			Log:    slog.New(humane.NewHandler(os.Stdout, &humane.Options{Level: slog.LevelInfo})),
			Banner: ui.NewBanner(version, commit, date),
		}
		fs := flag.NewFlagSet("main", flag.ExitOnError)
		fs.BoolFunc("version", "Get immich-go version", func(s string) error {
			printVersion()
			os.Exit(0)
			return nil
		})
	*/
	/*
		app.InitSharedFlags()
		app.SetFlags(fs)

		err := fs.Parse(os.Args[1:])
		if err != nil {
			app.Log.Error(err.Error())
			return err
		}

		if len(fs.Args()) == 0 {
			err = errors.New("missing command upload|duplicate|stack|tool")
		}

		if err != nil {
			app.Log.Error(err.Error())
			return err
		}

		cmd := fs.Args()[0]
		switch cmd {
		case "upload":
			err = upload.UploadCommand(ctx, &app, fs.Args()[1:])
		case "duplicate":
			err = duplicate.DuplicateCommand(ctx, &app, fs.Args()[1:])
		case "metadata":
			err = assets.MetadataCommand(ctx, &app, fs.Args()[1:])
		case "stack":
			err = stack.NewStackCommand(ctx, &app, fs.Args()[1:])
		case "tool":
			err = tool.CommandTool(ctx, &app, fs.Args()[1:])
		default:
			err = fmt.Errorf("unknown command: %q", cmd)
		}
	*/

	// if err != nil {
	// 	app.Log.Error(err.Error())
	// }
	// fmt.Println("Check the log file: ", app.LogFile)
	// if app.APITraceWriter != nil {
	// 	fmt.Println("Check the trace file: ", app.APITraceWriterName)
	// }
	// return err

	return err
}
